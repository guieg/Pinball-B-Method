IMPLEMENTATION PinballI
REFINES Pinball
    
CONSTANTS maxjogadores
    
PROPERTIES maxjogadores = 5
    
VALUES nBolas = 5; 
       maxjogadores = 5;
       JOGADOR = 0..4;
       valorMaquina = 5;
       empty = 0;
       jogadores = 1..4;
       bonus = {1 |->  [3,2,4], 2 |->  [1,4,5], 3 |->  [2,1, 4, 7], 4 |->  [3,2,1], 5 |->  [5,2,6], 6 |->  [4,7,1], 7 |->  [5,4,1,2,3]}

CONCRETE_VARIABLES
   jogadorAtual, bolasAtuais, pontuacaoAtual, estado, ranking, cartao, records, sequenciaAcertos, indicejogador
   
INVARIANT
    indicejogador : 0..(maxjogadores) >-> JOGADOR & jogadorAtual : JOGADOR & bolasAtuais : NAT & pontuacaoAtual : NAT & estado : 0..5  & ranking : 0..(maxjogadores) >-> 0..(maxjogadores)
    & cartao : 0..(maxjogadores) --> NAT & records :  0..(maxjogadores) --> NAT  & sequenciaAcertos : 0..5 +-> NAT
    & !xx.(xx: NAT1 & xx < size(ranking) & estado=0 => records(ranking(xx)) >= records(ranking(xx+1)))


INITIALISATION
    jogadorAtual, bolasAtuais, pontuacaoAtual, estado, ranking, cartao, records, sequenciaAcertos, indicejogador := empty, 0, 0, 0, [], jogadores*{0},{}, [], (0..(maxjogadores))*JOGADOR

OPERATIONS
    
    adicionarCredito(jj, cc) =
    BEGIN cartao :=  cartao <+ {jj |-> (cc + cartao(jj))}
    END ;
    
    transferirCredito(j1, j2, cc) = 
    BEGIN  cartao :=  (cartao <+ {j1 |-> (cartao(j1) - cc)}) <+ {j2 |-> (cc + cartao(j2))}
    END ;
    
    iniciarPartida(jj) = 
    BEGIN jogadorAtual := jj;
          bolasAtuais := nBolas; 
          cartao :=  cartao <+ {jj |-> (cartao(jj) - valorMaquina)}; 
          estado := 1; 
          pontuacaoAtual := 0
    END ;
    
    finalizar = 
    BEGIN jogadorAtual, estado, bolasAtuais, sequenciaAcertos:= empty, 2, 0, []; 
        IF jogadorAtual /: dom(records)  THEN 
            records(jogadorAtual) := pontuacaoAtual 
        ELSE 
            records(jogadorAtual) := max({records(jogadorAtual), pontuacaoAtual}) 
        END ;
        IF jogadorAtual /: ran(ranking) THEN 
            ranking := ranking  <+ { size(ranking) +1 |-> jogadorAtual} 
        ELSE 
            ranking := ranking  <+ { ranking~(jogadorAtual) |-> jogadorAtual} 
        END
    END;
    
    perderBola = 
    BEGIN  
        bolasAtuais, sequenciaAcertos :=  bolasAtuais -1, []
    END;
    // Adicionar e ordenar o ranking
    
    pontuar(pp) = 
    BEGIN sequenciaAcertos := sequenciaAcertos <- pp;
        IF size(sequenciaAcertos) >= card(bonus(pp)) THEN 
            IF rev(rev(sequenciaAcertos) /|\ card(bonus(pp))) = bonus(pp) THEN 
                pontuacaoAtual := pontuacaoAtual + pp*10 + 100 
            ELSE  pontuacaoAtual := pontuacaoAtual + pp*10  END 
        ELSE  pontuacaoAtual := pontuacaoAtual + pp*10 END
    END;
    
    rk <--  topN(nn)=
    BEGIN rk := % jg . (jg : NAT & jg : dom(ranking)  & jg <= nn | ranking(jg) ) // ranking /|\ nn
    END ;
    
    rk <-- posicaoRanking(pp)=
    BEGIN rk := ranking~(pp)
    END ;
    
    ordenarRanking = 
    BEGIN ranking := ranking ; 
            estado := 0
    END


 END